#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (binding = 0, rgba16) uniform image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;


vec3 LessThan(vec3 f, float value)
{
    return vec3(
        (f.x < value) ? 1.0f : 0.0f,
        (f.y < value) ? 1.0f : 0.0f,
        (f.z < value) ? 1.0f : 0.0f);
}

vec3 LinearToSRGB(vec3 rgb)
{
    rgb = clamp(rgb, 0.0f, 1.0f);

    return mix(
        pow(rgb, vec3(1.0f / 2.4f)) * 1.055f - 0.055f,
        rgb * 12.92f,
        LessThan(rgb, 0.0031308f)
    );
}

vec3 ACESFilm(vec3 x)
{
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return clamp(((x*(a*x+b))/(x*(c*x+d)+e)), 0.0, 1.0);
}

void main()
{
	uvec3 GlobalId = gl_GlobalInvocationID;

	vec3 rgb = imageLoad(inputImage, ivec2(GlobalId.x, GlobalId.y)).rgb;

    const float gamma = 2.2;

    vec3 mapped = ACESFilm(rgb.bgr);

    // gamma correction
    mapped = pow(mapped, vec3(1.0 / gamma));


	imageStore(resultImage, ivec2(GlobalId.xy), vec4(mapped, 1.0));
}